## **1Ô∏è‚É£ Two main keywords: `val` and `var`**

### üîπ `val` ‚Üí Immutable (read-only)

* Like `final` in Java.
* You **can‚Äôt reassign** it after initialization.

```kotlin
val name = "Sofiane"
name = "Ali"  // ‚ùå Error: Val cannot be reassigned
```

---

### üîπ `var` ‚Üí Mutable (can change)

* You **can reassign** its value.

```kotlin
var age = 21
age = 22   // ‚úÖ Works fine
```

---

## **2Ô∏è‚É£ Type inference**

* Kotlin can **infer the type** from the value, so you don‚Äôt always need to write the type explicitly:

```kotlin
val city = "Kh√©nifra"   // Inferred as String
var year = 2025         // Inferred as Int
```

---

## **3Ô∏è‚É£ Explicit type declaration**

* You can specify the type manually:

```kotlin
val country: String = "Morocco"
var score: Int = 100
```

---

## **4Ô∏è‚É£ Nullable vs Non-nullable**

* By default, variables **cannot hold `null`**.

```kotlin
var job: String = "Developer"
// job = null  // ‚ùå Error
```

* To allow `null`, add `?`:

```kotlin
var job: String? = "Developer"
job = null   // ‚úÖ Allowed
```

---

## **5Ô∏è‚É£ Constants (`const val`)**

* For compile-time constants (known at compile time, usually at top-level or inside `object`).

```kotlin
const val PI = 3.14
```

---

‚úÖ **Summary Table**

| Keyword     | Meaning               | Reassignment | Example                |
| ----------- | --------------------- | ------------ | ---------------------- |
| `val`       | Immutable (read-only) | ‚ùå No         | `val name = "Sofiane"` |
| `var`       | Mutable               | ‚úÖ Yes        | `var age = 21`         |
| `const val` | Compile-time constant | ‚ùå No         | `const val PI = 3.14`  |
